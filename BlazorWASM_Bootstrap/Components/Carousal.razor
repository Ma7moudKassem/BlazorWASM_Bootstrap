@inject IJSRuntime _jsRuntime

<div id="@carouselName" class="carousel slide carousel-fade" data-bs-ride="carousel" data-bs-wrap="true" data-bs-interval="2000" data-bs-pause="false">
    <div class="carousel-indicators">
        @for (int i = 0; i < Elements.Count; i++)
        {
            if (i == 0)
            {
                <button type="button" data-bs-target="#@carouselName" data-bs-slide-to="@i" class="active" aria-current="true" aria-label="@Elements[i].Alt"></button>
            }
            else
            {
                <button type="button" data-bs-target="#@carouselName" data-bs-slide-to="@i" aria-label="@Elements[i].Alt"></button>
            }
        }
    </div>
    <div class="carousel-inner">
        @for (int i = 0; i < Elements.Count; i++)
        {
            if (i == 0)
            {
                <div class="carousel-item active">
                    <img src="@Elements[i].Images" class="d-block w-100" alt="@Elements[i].Alt">
                    <div class="carousel-caption d-none d-md-block">
                        <h5>@Elements[i].Labels</h5>
                        <p>@Elements[i].Description</p>
                    </div>
                </div>
            }
            else
            {
                <div class="carousel-item">
                    <img src="@Elements[i].Images" class="d-block w-100" alt="@Elements[i].Alt">
                    <div class="carousel-caption d-none d-md-block">
                        <h5>@Elements[i].Labels</h5>
                        <p>@Elements[i].Description</p>
                    </div>
                </div>
            }
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#@carouselName" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#@carouselName" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

@code{

    [Parameter]
    public List<CarouselElements> Elements { get; set; }

    const string carouselName = "CarouselDiv";
    const string carouselFunctionName = "startCarousel";
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            object[] parameter = { carouselName };
            await _jsRuntime.InvokeVoidAsync(carouselFunctionName, parameter);
        }
    }
 }